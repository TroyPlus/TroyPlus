@model Troy.Web.Models.DeliveryReturnViewModels

@Scripts.Render("~/bundles/script/jqueryval")



<script type="text/javascript">
    $(document).ready(function () {

        $('.datePicke').datepicker({ dateFormat: 'dd-mm-yy' }).val();

        $('.datePicker').datepicker({ dateFormat: 'dd-mm-yy' }).val();
        $('.datepick1').datepicker({ dateFormat: 'dd-mm-yy' }).val();
        $('.datepick2').datepicker({ dateFormat: 'dd-mm-yy' }).val();
        $('.date3').datepicker({ dateFormat: 'dd-mm-yy' }).val();
        $("#editTypeahead").jAutochecklist();
        var i;

        i = $("#ItemCount").val();




        //Dynamically add quotation row
        function addRow() {


            var date = new Date();
            var strDate = (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();

            var selectHtml = CreateSelect(i);
            var selectHtml1 = CreateVATSelect(i);

            selectHtml += '</select>';
            selectHtml1 += '</select>';



            var html = '<tr>' +
                       '<td style="display:none;"> <input class="form-control control-text" data-val="true" data-val-number="The field IsActive must be a number." data-val-required="The IsActive field is required." id="deliveryreturnitemlist_' + i + '__IsDummy" name="deliveryreturnitemlist[' + i + '].IsDummy" type="text" value="">  </td>' +
                       '<td width="20%"> ' +
                           selectHtml +
                           '<span class="field-validation-valid" data-valmsg-for="deliveryreturnitemlist[' + i + '].Product_Id" data-valmsg-replace="true"></span>' +
                       '</td>' +
                       //'<td width="15%">' +
                       //    '<input class="form-control control-text datePicker" data-val="true" data-val-date="The field Required Date must be a date." data-val-required="The Required Date field is required." id="PurchaseQuotationItemList_' + i + '__Required_date" name="PurchaseQuotationItemList[' + i + '].Required_date" type="text" value="' + strDate + '">' +
                       //    '<span class="field-validation-valid" data-valmsg-for="goodreceiptitemlist[' + i + '].Required_date" data-valmsg-replace="true"></span>' +
                       //'</td>' +
                       '<td>' +
                           '<input class="form-control control-text" data-val="true" data-val-number="The field Required Quantity must be a number." data-val-required="The Required Quantity field is required." id="deliveryreturnitemlist_' + i + '__Quantity" name="deliveryreturnitemlist[' + i + '].Quantity" onkeyup="OnChangeQuantity(this, ' + i + ');" type="text" value="">' +
                           '<span class="field-validation-valid" data-valmsg-for="deliveryreturnitemlist[' + i + '].Quantity" data-valmsg-replace="true"></span>' +
                       '</td>' +
                       '<td>' +
                           '<input class="form-control control-text" data-val="true" data-val-number="The field Unit_price must be a number." data-val-required="The Unit_price field is required." id="deliveryreturnitemlist_' + i + '__Unit_Price" name="deliveryreturnitemlist[' + i + '].Unit_Price" readonly="True" type="text" value="">' +
                           '<span class="field-validation-valid" data-valmsg-for="deliveryreturnitemlist[' + i + '].Unit_Price" data-valmsg-replace="true"></span>' +
                       '</td>' +
                       '<td>' +
                           '<input class="form-control control-text" data-val="true" data-val-number="The field Discount_Precent must be a number." data-val-range="The field Discount% must be between 0 and 100." data-val-range-max="100" data-val-range-min="0"  data-val-required="The Discount_Precent field is required." id="deliveryreturnitemlist_' + i + '__Discount_Precent" name="deliveryreturnitemlist[' + i + '].Discount_Precent" onkeyup="OnChangeDiscount(this, ' + i + ');" type="text" value="">' +
                           '<span class="field-validation-valid" data-valmsg-for="deliveryreturnitemlist[' + i + '].Discount_Precent" data-valmsg-replace="true"></span>' +
                       '</td>' +
                       //'<td>' +
                       //    '<input class="form-control control-text valid" data-val="true" data-val-number="The field Amount must be a number." data-val-required="The Amount field is required." id="goodreceiptitemlist_' + i + '__Freight_Loading" name="goodreceiptitemlist[' + i + '].Freight_Loading" readonly="True" type="text" value="">' +
                       //    '<span class="field-validation-valid" data-valmsg-for="goodreceiptitemlist[' + i + '].Freight_Loading" data-valmsg-replace="true"></span>' +
                       //'</td>' +
                        '<td>' +
                           '<input class="form-control control-text valid" data-val="true" data-val-number="The field Amount must be a number." data-val-required="The Amount field is required." id="deliveryreturnitemlist_' + i + '_Freight_Loading" name="deliveryreturnitemlist[' + i + '].Freight_Loading" readonly="True" type="text" value="">' +
                           '<span class="field-validation-valid" data-valmsg-for="deliveryreturnitemlist[' + i + '].Freight_Loading" data-valmsg-replace="true"></span>' +
                       '</td>' +
                          '<td>' +
                            selectHtml1 +
                          '<span class="field-validation-valid" data-valmsg-for="deliveryreturnitemlist_[' + i + '].__Vat_Code" onkeyup="OnChangeVAT(this, ' + i + ');" data-valmsg-replace="true"></span>' +
                       '</td>' +
                       '<td>' +
                           '<input type="button" class="BtnPlus btn pull-left" value="+" /> <input style="margin-left:5px;" type="button" class="BtnMinus btn pull-left" value="-" />' +
                       '</td>' +

                       @*'<td>@Html.TextBoxFor(model => model.PurchaseQuotationItemList[2].Required_date, new { @class = "form-control control-text datePicker" })</td>' +
                   '<td> <input class="form-control control-text datePicker hasDatepicker" data-val="true" data-val-date="The field Required Date must be a date." data-val-required="The Required Date field is required." id="PurchaseQuotationItemList_0__Required_date" name="PurchaseQuotationItemList[0].Required_date" type="text" value=""> </td>' +*@

                       '</tr>'
            $(html).appendTo($("#EditTable"))

            //$("#PurchaseQuotationItemList_1__Required_date").datepicker("refresh");
            i++;

            //$("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");

            $("#EditTable").delegate(".datePicker", "focusin", function () {
                $(this).datepicker();
            });
        };
        function CreateSelect(rowID) {

            //debugger;

            var selectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field Product_id must be a number." data-val-required="The Product_id field is required." id="goodreturnitemlist_' + rowID + '__Product_id" name="deliveryreturnitemlist[' + rowID + '].Product_id" onchange="OnChangeProduct(this, ' + rowID + ');">';
            selectHtml += '<option value=""></option>';

            var dataUrl = "../GoodsReturn/GetProductList";

            $.ajax({
                type: 'GET',
                url: dataUrl,
                async: false,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                },
                success: function (result, status) {
                    //debugger;
                    for (var count = 0; count < result.length; count++) {
                        selectHtml += '<option value="' + result[count].Product_Id + '">' + result[count].Product_Name + '</option>';
                    }
                }
            });

            return selectHtml;
        }
            function CreateVATSelect(rowID) {

                var selectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field VAT_Id must be a number." data-val-required="The VAT_Id field is required." id="deliveryreturnitemlist_' + rowID + '__VAT_Id" name="deliveryreturnitemlist[' + rowID + '].VAT_Id" onchange="OnChangeVAT();" >';
                selectHtml += '<option value=""></option>';


                var dataUrl = "../GoodsReturn/GetVATList";


                $.ajax({
                    type: 'GET',
                    url: dataUrl,
                    async: false,
                    cache: false,
                    crossDomain: true,
                    contentType: "application/json; charset=utf-8",
                    dataType: 'json',
                    error: function (xhr, err) {
                    },
                    success: function (result, status) {
                        //debugger;
                        for (var count = 0; count < result.length; count++) {
                            selectHtml += '<option value="' + result[count].VAT_percentage + '">' + result[count].VAT_percentage + '</option>';
                        }
                    }
                });

                return selectHtml;
            }


        $("#EditTable").on("click", ".BtnPlus", addRow)

        function deleteRow() {

            //debugger;

            //if (i == 1) {
            //    alert("Atleast one item for each product");
            //}
            //else {

                var par = $(this).parent().parent();
                //par.remove();
                //$('#idEstablishmentRow td.ms-formbody span input').attr('id');

                var id = par[0].childNodes[1].childNodes[1].id;

                id = '#' + id;

                $(id).val("1");

                //par[0].childNodes[0].childNodes[1].value = 1;

                //$(id).val(1);
            //    par.remove();
            //    i--;
            //    CalculateTotal();
            //}
                par.hide();
                CalculateTotal();
                CalculateTotalAmount();
                CalculateTax();
        };
        $("#EditTable").on("click", ".BtnMinus", deleteRow);

    });

    function TabChange() {
        debugger;
        //if ($("#btnSubmit").val == "Next") {
        $('#edittabs a[href = #editQuotationItem]').tab('show');
        //    $("#btnSubmit").val("Save");
        //}
    }

    $(function () {
        $("#btnEditNextTab").click(function (e) {


            debugger;

            e.preventDefault();
            alert(e);
            var _this = $(this);
            var _form = _this.closest("#editdefault");

            var validator = $("#editdefault").validate(); // obtain validator
            var anyError = false;
            _form.find("input").each(function () {
                //debugger;
                if (this.parentNode.parentNode.className != "jAutochecklist_list") {
                    if (!validator.element(this)) { // validate every input element inside this step
                        anyError = true;
                    }
                }
            });

            _form.find("select").each(function () {
                debugger;

                if (!validator.element(this)) { // validate every input element inside this step
                    anyError = true;
                }
            });

            if (anyError) {
                return false;
            }
            else {
                $('#edittabs a[href = #editQuotationItem]').tab('show');
            }// exit if any error found

        });

    });


    function OnChangeQuantity(currentQty, rowId) {
        //debugger;

        var qty = currentQty.value;
        var price = $("#deliveryreturnitemlist_" + rowId + "__Unit_price").val();

        var totAmount = price * qty;

        var id = "#deliveryreturnitemlist_" + rowId + "__LineTotal";
        $(id).val(totAmount.toFixed(2));
        CalculateTotal();
        CalculateTotalAmount();
    }

    function OnChangeDiscount(currentDis, rowId) {
        //debugger;

        var dis = currentDis.value;
        var qty = $("#deliveryreturnitemlist_" + rowId + "__Quantity").val();
        var price = $("#deliveryreturnitemlist_" + rowId + "__Unit_price").val();

        var totAmount = price * qty - ((price * qty) * dis / 100)

        var id = "#deliveryreturnitemlist_" + rowId + "__LineTotal";
        $(id).val(totAmount.toFixed(2));

        CalculateTotal();
        //CalculateDiscount();
        CalculateTotalAmount();
    }

    function OnChangeVAT(currentVAT, rowId) {
        //var vat = currentVAT.value;
        //var qty = $("#PurchaseQuotationItemList_" + rowId + "__Quantity").val();
        //var price = $("#PurchaseQuotationItemList_" + rowId + "__Unit_price").val();
        //var dis = $("#PurchaseQuotationItemList_" + rowId + "__Discount_percent").val();

        //var totAmount = price * qty - ((price * qty) * dis / 100)
        //var totvat = totAmount * (vat / 100)
        //var totNet = totAmount + totvat

        //var id = "#PurchaseQuotationItemList_" + rowId + "__LineTotal";
        //$(id).val(totNet);

        CalculateTax();
        CalculateTotalAmount();
    }

    function OnChangeDiscountSummary(currentDis) {
        //var totdis = currentDis.value;
        //var totdoc = $("#totalPurchase1").val();
        //var tottax = $("#totalTax1").val();
        //tot = (parseFloat(totdoc) - parseFloat(totdis)) + parseFloat(tottax);

        //$("#totalQuotationAmt1").val(tot);

        var percentage = 0;
        var totdoc = 0;
        var totdis = currentDis.value;
        var tottax = 0;
        var totline = 0;
        var totminus = 0;
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val()))) {
                totdoc = parseFloat(totdoc) + parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val());
            }
        }

        percentage = totdis / totdoc * 100;


        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val()))) {
                totline = parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val() * percentage / 100);
                totminus = parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val()) - totline;
                tottax = parseFloat(tottax) + parseFloat(totminus) * parseFloat($("#deliveryreturnitemlist_" + j + "__Vat_Code").val()) / 100;
            }
        }

        tot = (totdoc - totdis) + tottax;

        $("#totalTax1").val(tottax.toFixed(2));
        $("#totalQuotationAmt1").val(tot.toFixed(2));
    }

    function CalculateTotal() {
        //debugger;
        var tot = 0;
        //if (i == 0) {
        //    tot = parseFloat(tot) + parseFloat($("#PurchaseQuotationItemList_" + i + "__Amount").val());
        //}
        //else {
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val()))) {
                tot = parseFloat(tot) + parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val());

            }
        }
        //}

        $("#totalPurchase1").val(tot.toFixed(2));

    }

    function CalculateDiscount() {
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#deliveryreturnitemlist_" + j + "__Discount_Precent").val()))) {
                tot = parseFloat(tot) + parseFloat($("#deliveryreturnitemlist_" + j + "__Discount_Precent").val());
            }
        }

        $("#totalDiscount1").val(tot.toFixed(2));

    }

    function CalculateTax() {
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#deliveryreturnitemlist_" + j + "__Vat_Code").val()))) {
                //tot = parseFloat(tot) + parseFloat($("#PurchaseQuotationItemList_" + j + "__Vat_Code").val());
                tot = parseFloat(tot) + (parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val()) * parseFloat($("#goodreturnitemlist_" + j + "__Vat_Code").val()) / 100);
            }
        }

        $("#totalTax1").val(tot.toFixed(2));

    }

    function CalculateTotalAmount() {
        var totdoc = 0;
        var totdis = 0;
        var tottax = 0;
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val()))) {
                totdoc = parseFloat(totdoc) + parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val());
            }
        }

        //for (var j = i; j >= 0; j--) {
        //    if (!isNaN(parseFloat($("#PurchaseQuotationItemList_" + j + "__Discount_percent").val()))) {
        //        totdis = parseFloat(totdis) + parseFloat($("#PurchaseQuotationItemList_" + j + "__Discount_percent").val());
        //    }
        //}

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#deliveryreturnitemlist_" + j + "__Vat_Code").val()))) {
                //tottax = parseFloat(tottax) + parseFloat($("#PurchaseQuotationItemList_" + j + "__Vat_Code").val());
                tottax = parseFloat(tottax) + (parseFloat($("#deliveryreturnitemlist_" + j + "__LineTotal").val()) * parseFloat($("#deliveryreturnitemlist_" + j + "__Vat_Code").val()) / 100);
            }
        }

        //tot = (totdoc - totdis) + tottax;
        tot = totdoc + tottax;

        $("#totalQuotationAmt1").val(tot.toFixed(2));

    }








</script>





@using (Html.BeginForm("Index", "DeliveryReturns"))
{
    @Html.ValidationSummary(true)
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Edit Deliveryreturns</h4>
            </div>

            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="row">
                        <div class="tabs">
                            <ul id="edittabs" class="nav nav-tabs tabdrop">
                                <li class="active">
                                    <a href="#editdefault" data-toggle="tab">General </a>
                                </li>
                                <li><a href="#editQuotationItem" data-toggle="tab">DeliveryReturn Items </a></li>
                            </ul>
                            @Html.HiddenFor(model => model.deliveryreturn.Delivery_Return_Id)
                            @Html.Hidden("ItemCount", Model.deliveryreturnitemlist.Count)
                            @Html.HiddenFor(model => model.deliveryreturn.Created_Date)
                            @Html.HiddenFor(model => model.deliveryreturn.Created_Branc_Id)
                            @Html.HiddenFor(model => model.deliveryreturn.Created_User_Id)
                            @*@Html.HiddenFor(model=>model.PurchaseOrder.Purchase_Quote_Id);*@

                            <div id="editTabContent" class="tab-content">

                                <div class="tab-pane fade active in" id="editdefault">

                                    <div class="row">
                                        <div class="col-md-6">

                                            <div class="form-horizontal">

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @*@Html.LabelFor(m => m.goodreceipt.Purchase_Order_Id, new { @class = "control-label normal" })*@
                                                        DeiveryReturn Id
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*, new { @id = "typeahead", @size = 12 }*@
                                                        @*@Html.DropDownListFor(m => m.goodreturn.Goods_Return_Id, new SelectList(Model.BranchList.AsEnumerable(), "Branch_Id", "Branch_Name"), "", new { @class = "form-control control-text" })*@
                                                        @Html.TextBoxFor(model => model.deliveryreturn.Delivery_Return_Id, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.deliveryreturn.Delivery_Return_Id)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.deliveryreturn.Customer, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*@Html.TextBoxFor(model => model.goodreceipt.Vendor, new { @class = "form-control control-text" })*@
                                                        @Html.DropDownListFor(m => m.deliveryreturn.Customer, new SelectList(Model.BussinessList.AsEnumerable(), "BP_Id", "BP_Name"), "", new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.deliveryreturn.Customer)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.deliveryreturn.Reference_Number, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.deliveryreturn.Reference_Number, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.deliveryreturn.Reference_Number)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @*@Html.LabelFor(m => m.goodreceipt.Doc_Status, new { @class = "control-label normal" })*@
                                                        Document Status
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.deliveryreturn.Doc_Status, new List<SelectListItem>
                                                         {
                                                            new SelectListItem{ Text="Open", Value = "Open" },
                                                            new SelectListItem{ Text="Closed", Value = "Closed" }
                                                         }, "Open", new { @class = "form-control" })@*, @disabled = true })*@

                                                        @*@Html.TextBoxFor(m => m.PurchaseQuotation.Quotation_Status, new { @class = "form-control", @readonly = true })*@
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @*@Html.LabelFor(m => m.goodreceipt.Ship_To, new { @class = "control-label normal" })*@
                                                        Ship To
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(m => m.deliveryreturn.Branch, new SelectList(Model.BranchList.AsEnumerable(), "Branch_Id", "Branch_Name"), "", new { @class = "form-control control-text" })
                                                        @*@Html.TextBoxFor(model => model.goodreceipt.Ship_To, new { @class = "form-control control-text" })*@
                                                        @Html.ValidationMessageFor(model => model.deliveryreturn.Branch)
                                                    </div>
                                                </div>

                                            </div>
                                        </div>

                                        <div class="col-md-6">
                                            <div class="form-horizontal">
                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @*@Html.LabelFor(m => m.goodreceipt.Posting_Date, new { @class = "control-label normal" })*@
                                                        Posting Date
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.deliveryreturn.Posting_Date, new { @Value = Model.deliveryreturn.Posting_Date.ToString("MM/dd/yyyy"), @class = "form-control control-text datePicke", @id = "datePicker" })
                                                        @*@Html.ValidationMessageFor(model => model.goodreturn.Posting_Date)*@
                                                    </div>
                                                </div>



                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @*@Html.LabelFor(m => m.goodreceipt.Due_Date, new { @class = "control-label normal" })*@
                                                        Due Date:
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.deliveryreturn.Delivery_Date, new { @Value = Model.deliveryreturn.Delivery_Date.ToString("MM/dd/yyyy"), @class = "form-control control-text datePicke", @id = "datepick2" })
                                                        @*@Html.ValidationMessageFor(model => model.goodreturn.Due_Date)*@
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @*@Html.LabelFor(m => m.goodreceipt.Document_Date, new { @class = "control-label normal" })*@
                                                        Document Date
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*@Html.TextBoxFor(model => model.PurchaseQuotation.Posting_Date, new { @class = "form-control control-text datePicker" })*@
                                                        @Html.TextBoxFor(model => model.deliveryreturn.Document_Date, new { @Value = Model.deliveryreturn.Document_Date.ToString("MM/dd/yyyy"), @class = "form-control control-text datePicke", @id = "date3" })@*, @readonly = true })*@
                                                        @*@Html.ValidationMessageFor(model => model.goodreturn.Document_Date)*@
                                                    </div>
                                                </div>


                                              

                                                @*<div class="row  form-group">
                                                    <div class="col-md-4">
                                                        Html.LabelFor(m => m.goodreceipt.Distribute_LandedCost, new { @class = "control-label normal" })*@
                                                @*Distribute LandedCost
                                                        </div>
                                                        <div class="col-md-8">
                                                            @Html.TextBoxFor(model => model.goodreceipt.Distribute_LandedCost, new { @class = "form-control control-text" })
                                                            @Html.ValidationMessageFor(model => model.goodreceipt.Distribute_LandedCost)
                                                        </div>
                                                    </div>*@








                                                @*<div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.goodreturn.Distribute_LandedCost, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.goodreceipt.Distribute_LandedCost, new List<SelectListItem>
                                                         {
                                                            new SelectListItem{ Text="Equally", Value = "Equally" },
                                                            new SelectListItem{ Text="Quantity", Value = "Quantity" },
                                                               new SelectListItem{ Text="Cost", Value = "Cost" }
                                                         }, "", new { @class = "form-control" })*@

                                                @*@Html.TextBoxFor(m => m.PurchaseQuotation.Quotation_Status, new { @class = "form-control", @readonly = true })*@
                                                @*</div>
                                                    </div>*@

                                            </div>
                                        </div>
                                    </div>
                                    <br />
                                    <div class="row">
                                        <div class="modal-footer">
                                            <input class="btn btn-primary pull-left" type="button" id="btnEditNextTab" name="nextButton" value="Next" />
                                            <button class="btn pull-left" data-dismiss="modal">Cancel</button>
                                        </div>
                                    </div>

                                </div>

                                <div class="tab-pane fade" id="editQuotationItem">

                                    <div>

                                        <table id="EditTable" class="table display">
                                            <thead>
                                                <tr>
                                                    <th>Product_Id</th>
                                                    <th>Quantity</th>
                                                    <th>Unit Price</th>
                                                    <th>Discount %</th>
                                                    <th> Freight_Loading</th>
                                                    <th>VAT Code</th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @for (int i = 0; i < Model.deliveryreturnitemlist.Count; i++)
                                                {

                                                    // @Html.HiddenFor(model => model.goodreceiptitemlist[i].Goods_Receipt_Id)
                                                    // @Html.HiddenFor(model => model.goodreceiptitemlist[i].Purchase_Quote_Id)
                                                    @Html.HiddenFor(model => model.deliveryreturnitemlist[i].Delivery_Return_Items_Id)

                                                    <tr>
                                                        <td style="display:none;">
                                                            @Html.HiddenFor(model => model.deliveryreturnitemlist[i].IsDummy, 0)

                                                        </td>
                                                        <td width="20%">
                                                            @*@Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Product_id, new { @class = "form-control control-text" })*@
                                                            @Html.DropDownListFor(m => m.deliveryreturnitemlist[i].Product_Id, new SelectList(Model.productlist.AsEnumerable(), "Product_Id", "Product_Name", Model.deliveryreturnitemlist[i].Product_Id), new { @class = "form-control control-text", @onchange = "OnChangeProduct(this, " + i + ");" })
                                                            @*@Html.DropDownListFor(m => m.goodreturnitemlist[i].Product_id, new SelectList(Model.BussinessList.AsEnumerable(), "BP_Id", "BP_Name"), "", new { @class = "form-control control-text", @onchange = "OnChangeProduct(this, " + i + ");" })*@
                                                            @*@Html.TextBoxFor(model => model.goodreceiptitemlist[i].Product_id, new { @class = "form-control control-text" })*@
                                                            @Html.ValidationMessageFor(model => model.deliveryreturnitemlist[i].Product_Id)
                                                        </td>
                                                        @*<td width="15%">
                                                                @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Required_date, new { @Value = DateTime.Now.ToString("MM/dd/yyyy"), @class = "form-control control-text datePicker" })
                                                                @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Required_date)
                                                            </td>*@
                                                        <td>
                                                            @Html.TextBoxFor(model => model.deliveryreturnitemlist[i].Quantity, new { @class = "form-control control-text", @onkeyup = "OnChangeQuantity(this, " + i + ");" })
                                                            @Html.ValidationMessageFor(model => model.deliveryreturnitemlist[i].Quantity)
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(model => model.deliveryreturnitemlist[i].Unit_Price, new { @class = "form-control control-text", @readonly = true })
                                                            @Html.ValidationMessageFor(model => model.deliveryreturnitemlist[i].Unit_Price)
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(model => model.deliveryreturnitemlist[i].Discount_Precent, new { @class = "form-control control-text", @onkeyup = "OnChangeDiscount(this, " + i + ");" })
                                                            @Html.ValidationMessageFor(model => model.deliveryreturnitemlist[i].Discount_Precent)
                                                        </td>
                                                        <td>
                                                            @Html.TextBoxFor(model => model.deliveryreturnitemlist[i].LineTotal, new { @class = "form-control control-text", @readonly = true })
                                                            @Html.ValidationMessageFor(model => model.deliveryreturnitemlist[i].LineTotal)
                                                        </td>
                                                        <td>
                                                            @Html.DropDownListFor(m => m.deliveryreturnitemlist[i].Vat_Code, new SelectList(Model.VATList.AsEnumerable(), "VAT_percentage", "VAT_percentage", Model.deliveryreturnitemlist[i].Vat_Code), new { @class = "form-control control-text", @onchange = "OnChangeVAT(this, " + i + ");" })
                                                            @Html.ValidationMessageFor(model => model.deliveryreturnitemlist[i].Vat_Code)
                                                        </td>
                                                        <td style="width: 90px;">
                                                            <input class="BtnPlus btn pull-left" type="button" value="+" />
                                                            @if (i > 0)
                                                            {
                                                                <input style="margin-left:5px;" class="BtnMinus btn pull-left" type="button" value="-" />
                                                            }
                                                        </td>
                                                    </tr>

                                                }
                                            </tbody>
                                        </table>

                                    </div>
                                    <div class="modal-footer">

                                        <input class="btn btn-primary pull-left" type="submit" id="btnSubmit" name="submitButton" value="Update" />
                                        <button class="btn pull-left" data-dismiss="modal">Close</button>
                                        <div class="row" style="float:right;">
                                            Total : <span>@Html.TextBoxFor(m => m.deliveryreturn.TotalBefDocDisc, new { id = "totalPurchase1", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                            Discount Amount : <span>@Html.TextBoxFor(m => m.deliveryreturn.DocDiscAmt, new { id = "totalDiscount1", @class = "input-small", @onkeyup = "OnChangeDiscountSummary(this);" }) @Html.ValidationMessageFor(model => model.deliveryreturn.DocDiscAmt) </span> <br />
                                            Tax Amount : <span>@Html.TextBoxFor(m => m.deliveryreturn.TaxAmt, new { id = "totalTax1", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                            Total Quotation Amount : <span>@Html.TextBoxFor(m => m.deliveryreturn.TotalSlsDlvryAmt, new { id = "totalQuotationAmt1", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                        </div>

                                    </div>

                                </div>

                            </div>

                        </div>
                    </div>
                </div>

            </div>

            @*<div class="modal-footer">
                    <input class="btn btn-primary pull-left" type="submit" id="btnSubmit" name="submitButton" value="Update" />
                    <button class="btn pull-left" data-dismiss="modal">Close</button>
                    @Ajax.ActionLink("Change content", "UpdateContent", "Home", new AjaxOptions { UpdateTargetId = "myTabContent" })
                </div>*@

        </div>
    </div>
}
