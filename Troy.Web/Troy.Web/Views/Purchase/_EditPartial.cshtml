@model Troy.Web.Models.PurchaseViewModels

@Scripts.Render("~/bundles/script/jqueryval")

<script type="text/javascript">
    $(document).ready(function () {
        $('.datePicker').datepicker();

        var startDate = $("#editPostingDate").val();

        $('#editRequiredDate').datepicker({
            minDate: startDate
        });

        $('#editValidDate').datepicker({
            minDate: startDate
        });


        $("#editTypeahead").jAutochecklist();
        var i;

        i = $("#ItemCount").val();

        //Dynamically add quotation row
        function addRow() {

            var date = new Date();
            var strDate = (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();


            //var productSelectHtml = CreateProductSelect(i);

            //productSelectHtml += '</select>';

            var vatSelectHtml = CreateVATSelect(i);

            vatSelectHtml += '</select>';

            var html = '<tr>' +
                        '<td style="display:none;"> <input class="form-control control-text" data-val="true" data-val-number="The field IsActive must be a number." data-val-required="The IsActive field is required." id="PurchaseQuotationItemList_' + i + '__IsDummy" name="PurchaseQuotationItemList[' + i + '].IsDummy" type="text" value="">  </td>' +
                        '<td width="20%"> ' +
                            //productSelectHtml +
                            '<span class="field-validation-valid" data-valmsg-for="PurchaseQuotationItemList[' + i + '].Product_id" data-valmsg-replace="true"></span>' +
                        '</td>' +
                        '<td width="15%">' +
                            '<input class="form-control control-text datePicker" data-val="true" data-val-date="The field Required Date must be a date." data-val-required="The Required Date field is required." id="PurchaseQuotationItemList_' + i + '__Required_date" name="PurchaseQuotationItemList[' + i + '].Required_date" type="text" value="' + strDate + '">' +
                            '<span class="field-validation-valid" data-valmsg-for="PurchaseQuotationItemList[' + i + '].Required_date" data-valmsg-replace="true"></span>' +
                        '</td>' +
                        '<td>' +
                            '<input class="form-control control-text" data-val="true" data-val-number="The field Required Quantity must be a number." data-val-required="The Required Quantity field is required." id="PurchaseQuotationItemList_' + i + '__Required_qty" name="PurchaseQuotationItemList[' + i + '].Required_qty" onkeyup="OnChangeQuantity(this, ' + i + ');" type="text" value="">' +
                            '<span class="field-validation-valid" data-valmsg-for="PurchaseQuotationItemList[' + i + '].Required_qty" data-valmsg-replace="true"></span>' +
                        '</td>' +
                        '<td>' +
                            '<input class="form-control control-text" data-val="true" data-val-number="The field Unit_price must be a number." data-val-required="The Unit_price field is required." id="PurchaseQuotationItemList_' + i + '__Unit_price" name="PurchaseQuotationItemList[' + i + '].Unit_price" readonly="True" type="text" value="">' +
                            '<span class="field-validation-valid" data-valmsg-for="PurchaseQuotationItemList[' + i + '].Unit_price" data-valmsg-replace="true"></span>' +
                        '</td>' +
                        '<td>' +
                            '<input class="form-control control-text" data-val="true" data-val-number="The field Discount_percent must be a number." data-val-range="The field Discount% must be between 0 and 100." data-val-range-max="100" data-val-range-min="0"  data-val-required="The Discount_percent field is required." id="PurchaseQuotationItemList_' + i + '__Discount_percent" name="PurchaseQuotationItemList[' + i + '].Discount_percent" onkeyup="OnChangeDiscount(this, ' + i + ');" type="text" value="">' +
                            '<span class="field-validation-valid" data-valmsg-for="PurchaseQuotationItemList[' + i + '].Discount_percent" data-valmsg-replace="true"></span>' +
                        '</td>' +
                         '<td width="10%">' +
                            vatSelectHtml +
                            '<span class="field-validation-valid" data-valmsg-for="PurchaseQuotationItemList[' + i + '].Vat_Code" data-valmsg-replace="true"></span>' +
                        '</td>' +
                        '<td>' +
                            '<input class="form-control control-text valid" data-val="true" data-val-number="The field Amount must be a number." data-val-required="The Amount field is required." id="PurchaseQuotationItemList_' + i + '__LineTotal" name="PurchaseQuotationItemList[' + i + '].LineTotal" readonly="True" type="text" value="">' +
                            '<span class="field-validation-valid" data-valmsg-for="PurchaseQuotationItemList[' + i + '].LineTotal" data-valmsg-replace="true"></span>' +
                        '</td>' +
                        '<td>' +
                            '<input type="button" class="BtnPlus btn pull-left" value="+" /> <input style="margin-left:5px;" type="button" class="BtnMinus btn pull-left" value="-" />' +
                        '</td>' +

                        @*'<td>@Html.TextBoxFor(model => model.PurchaseQuotationItemList[2].Required_date, new { @class = "form-control control-text datePicker" })</td>' +
                        '<td> <input class="form-control control-text datePicker hasDatepicker" data-val="true" data-val-date="The field Required Date must be a date." data-val-required="The Required Date field is required." id="PurchaseQuotationItemList_0__Required_date" name="PurchaseQuotationItemList[0].Required_date" type="text" value=""> </td>' +*@

                        '</tr>'

            $(html).appendTo($("#EditTable"))

            //$("#PurchaseQuotationItemList_1__Required_date").datepicker("refresh");
            i++;

            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");

            $("#EditTable").delegate(".datePicker", "focusin", function () {
                $(this).datepicker();
            });
        };

        //function CreateProductSelect(rowID) {

        //    //debugger;

        //    var selectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field Product_id must be a number." data-val-required="The Product_id field is required." id="PurchaseQuotationItemList_' + rowID + '__Product_id" name="PurchaseQuotationItemList[' + rowID + '].Product_id" onchange="OnChangeProduct(this, ' + rowID + ');">';
        //    selectHtml += '<option value=""></option>';

        //    var dataUrl = "/Purchase/GetProductList";

        //    $.ajax({
        //        type: 'GET',
        //        url: dataUrl,
        //        async: false,
        //        cache: false,
        //        crossDomain: true,
        //        contentType: "application/json; charset=utf-8",
        //        dataType: 'json',
        //        error: function (xhr, err) {
        //        },
        //        success: function (result, status) {
        //            //debugger;
        //            for (var count = 0; count < result.length; count++) {
        //                selectHtml += '<option value="' + result[count].Product_Id + '">' + result[count].Product_Name + '</option>';
        //            }
        //        }
        //    });

        //    return selectHtml;
        //}

        function CreateVATSelect(rowID) {

            var vatselectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field VAT must be a number." data-val-required="The VAT field is required." id="PurchaseQuotationItemList_' + rowID + '__Vat_Code" name="PurchaseQuotationItemList[' + rowID + '].Vat_Code" >';
            vatselectHtml += '<option value=""></option>';

            var dataUrl = "/Purchase/GetVATList";

            $.ajax({
                type: 'GET',
                url: dataUrl,
                async: false,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                },
                success: function (result, status) {
                    //debugger;
                    for (var count = 0; count < result.length; count++) {
                        vatselectHtml += '<option value="' + result[count].VAT_Id + '">' + result[count].VAT_percentage + '</option>';
                    }
                }
            });

            return vatselectHtml;
        }

        $("#EditTable").on("click", ".BtnPlus", addRow);

        function deleteRow() {
            var par = $(this).parent().parent();
            //par.remove();
            //$('#idEstablishmentRow td.ms-formbody span input').attr('id');
            var id = par[0].childNodes[1].childNodes[1].id;

            id = '#' + id;

            $(id).val("1");

            //par[0].childNodes[0].childNodes[1].value = 1;

            //$(id).val(1);
            par.hide();
        };

        $("#EditTable").on("click", ".BtnMinus", deleteRow);

    });


    $(function () {
        $("#btnEditNextTab").click(function (e) {

            debugger;

            e.preventDefault();
            var _this = $(this);
            var _form = _this.closest("#editdefault");

            var validator = $("#editdefault").validate(); // obtain validator
            var anyError = false;
            _form.find("input").each(function () {
                //debugger;
                if (this.parentNode.parentNode.className != "jAutochecklist_list") {
                    if (!validator.element(this)) { // validate every input element inside this step
                        anyError = true;
                    }
                }
            });

            _form.find("select").each(function () {
                debugger;

                if (!validator.element(this)) { // validate every input element inside this step
                    anyError = true;
                }
            });

            if (anyError) {
                return false;
            }
            else {
                $('#edittabs a[href = #editQuotationItem]').tab('show');
            }// exit if any error found

        });

    });

    function GetPrice(pID) {

        var dataUrl = "/Purchase/GetPrice?pID=" + pID;
        var price;
        $.ajax({
            type: 'GET',
            url: dataUrl,
            //data: pID,
            async: false,
            cache: false,
            crossDomain: true,
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            error: function (xhr, err) {
            },
            success: function (result, status) {
                price = result;
            }
        });

        return price;
    }

    function OnChangeQuantity(currentQty, pID, rowId) {
        
        var qty = currentQty.value;             

        var price = GetPrice(pID);         

        var totAmount = price * qty;
        
        var id = "#EditPurchaseQuotationItemList_" + rowId + "__LineTotal";
        $(id).val(totAmount);
        CalculateTotal();
        CalculateTotalAmount();
    }

    function OnChangeDiscount(currentDis, rowId) {
        //debugger;

        var dis = currentDis.value;
        var qty = $("#EditPurchaseQuotationItemList_" + rowId + "__Required_qty").val();
        var price = $("#EditPurchaseQuotationItemList_" + rowId + "__Unit_price").val();

        //var totAmount = (price * qty) - dis
        //var id = "#PurchaseQuotationItemList_" + rowId + "__LineTotal";
        //$(id).val(totAmount);

        CalculateDiscount();
        CalculateTotalAmount();
    }

    function OnChangeVAT() {
        CalculateTax();
        CalculateTotalAmount();
    }

    function OnChangeDiscountSummary(currentDis) {

        var totdis = currentDis.value;
        var totdoc = $("#editTotalPurchase").val();
        var tottax = $("#editTotalTax").val();
        tot = (parseFloat(totdoc) - parseFloat(totdis)) + parseFloat(tottax);

        $("#editTotalQuotationAmt").val(tot);
    }

    function CalculateTotal() {
        //debugger;
        var tot = 0;
        //if (i == 0) {
        //    tot = parseFloat(tot) + parseFloat($("#PurchaseQuotationItemList_" + i + "__Amount").val());
        //}
        //else {
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#EditPurchaseQuotationItemList_" + j + "__LineTotal").val()))) {
                tot = parseFloat(tot) + parseFloat($("#EditPurchaseQuotationItemList_" + j + "__LineTotal").val());
            }
        }
        //}

        $("#editTotalPurchase").val(tot);
    }

    function CalculateDiscount() {
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Discount_percent").val()))) {
                tot = parseFloat(tot) + parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Discount_percent").val());
            }
        }

        $("#editTotalDiscount").val(tot);
    }

    function CalculateTax() {
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Vat_Code").val()))) {
                tot = parseFloat(tot) + parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Vat_Code").val());
            }
        }

        $("#editTotalTax").val(tot);
    }

    function CalculateTotalAmount() {
        var totdoc = 0;
        var totdis = 0;
        var tottax = 0;
        var tot = 0;
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#EditPurchaseQuotationItemList_" + j + "__LineTotal").val()))) {
                totdoc = parseFloat(totdoc) + parseFloat($("#EditPurchaseQuotationItemList_" + j + "__LineTotal").val());
            }
        }

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Discount_percent").val()))) {
                totdis = parseFloat(totdis) + parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Discount_percent").val());
            }
        }

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Vat_Code").val()))) {
                tottax = parseFloat(tottax) + parseFloat($("#EditPurchaseQuotationItemList_" + j + "__Vat_Code").val());
            }
        }

        tot = (totdoc - totdis) + tottax;

        $("#editTotalQuotationAmt").val(tot);
    }

</script>

@using (Html.BeginForm("Index", "Purchase"))
{
    @Html.ValidationSummary(true)
    <div class="modal-dialog modal-lg">
        <div class="modal-content">

            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Edit Purchase</h4>
            </div>

            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="row">
                        <div class="tabs">
                            <ul id="edittabs" class="nav nav-tabs tabdrop">
                                <li class="active">
                                    <a href="#editdefault" data-toggle="tab">General </a>
                                </li>
                                <li><a href="#editQuotationItem" data-toggle="tab">Product </a></li>
                            </ul>

                            @Html.HiddenFor(model => model.PurchaseQuotation.Purchase_Quote_Id)
                            @Html.Hidden("ItemCount", Model.PurchaseQuotationItemList.Count)

                            <div id="editTabContent" class="tab-content">

                                <div class="tab-pane fade active in" id="editdefault">

                                    <div class="row">
                                        <div class="col-md-6">

                                            <div class="form-horizontal">

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Vendor_Code, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*@Html.TextBoxFor(model => model.PurchaseQuotation.Vendor, new { @class = "form-control control-text" })*@
                                                        @Html.DropDownListFor(m => m.PurchaseQuotation.Vendor_Code, new SelectList(Model.BussinessList.AsEnumerable(), "BP_Id", "BP_Name"), "", new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Vendor_Code)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Reference_Number, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotation.Reference_Number, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Reference_Number)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Quotation_Status, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.PurchaseQuotation.Quotation_Status, new List<SelectListItem>
                                                         {
                                                            new SelectListItem{ Text="Open", Value = "Open" },
                                                            new SelectListItem{ Text="Closed", Value = "Closed" },
                                                            new SelectListItem{ Text="Cancelled", Value = "Cancelled" }
                                                         }, new { @class = "form-control" })
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Ship_To, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(m => m.PurchaseQuotation.Ship_To, new SelectList(Model.BranchList.AsEnumerable(), "Branch_Id", "Branch_Name"), "", new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Ship_To)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Freight, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotation.Freight, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Freight)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Loading, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotation.Loading, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Loading)
                                                    </div>
                                                </div>

                                            </div>

                                        </div>

                                        <div class="col-md-6">

                                            <div class="form-horizontal">

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Posting_Date, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotation.Posting_Date, new { @Value = Model.PurchaseQuotation.Posting_Date.ToString("MM/dd/yyyy"), @class = "form-control control-text datePicker", id = "editPostingDate", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Posting_Date)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Required_Date, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotation.Required_Date, new { @Value = Model.PurchaseQuotation.Required_Date.ToString("MM/dd/yyyy"), @class = "form-control control-text ", id = "editRequiredDate" })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Required_Date)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Valid_Date, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotation.Valid_Date, new { @Value = Model.PurchaseQuotation.Valid_Date.ToString("MM/dd/yyyy"), @class = "form-control control-text ", id = "editValidDate" })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Valid_Date)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        @Html.LabelFor(m => m.PurchaseQuotation.Remarks, new { @class = "control-label normal" })
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextAreaFor(model => model.PurchaseQuotation.Remarks, new { @class = "form-control", @cols = 55, @rows = 5, @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotation.Remarks)
                                                    </div>
                                                </div>

                                            </div>

                                        </div>
                                    </div>

                                    <br />
                                    <div class="row">
                                        <div class="modal-footer">
                                            <input class="btn btn-primary pull-left" type="button" id="btnEditNextTab" name="nextButton" value="Next" />
                                            <button class="btn pull-left" data-dismiss="modal">Cancel</button>
                                        </div>
                                    </div>

                                </div>

                                <div class="tab-pane fade" id="editQuotationItem">

                                    <div>

                                        <table id="EditTable" class="table display">
                                            <thead>
                                                <tr>
                                                    <th>Item Code</th>
                                                    <th>Required Date</th>
                                                    <th>Required Quantity</th>
                                                    <th>Quoted Date</th>
                                                    <th>Quoted Quantity</th>
                                                    <th>Unit Price</th>
                                                    <th>Discount %</th>
                                                    <th>VAT Code</th>
                                                    <th> Amount</th>
                                                    @*<th></th>*@
                                                </tr>
                                            </thead>

                                            @for (int i = 0; i < Model.PurchaseQuotationItemList.Count; i++)
                                            {
                                                @Html.HiddenFor(model => model.PurchaseQuotationItemList[i].Quote_Item_Id)
                                                @Html.HiddenFor(model => model.PurchaseQuotationItemList[i].Purchase_Quote_Id)
                                                @Html.HiddenFor(model => model.PurchaseQuotationItemList[i].Product_id)

                                                <tr>
                                                    <td style="display:none;">
                                                        @Html.HiddenFor(model => model.PurchaseQuotationItemList[i].IsDummy, 0)
                                                        
                                                    </td>
                                                    <td width="20%">

                                                        @*@Html.DropDownListFor(m => m.PurchaseQuotationItemList[i].Product_id, new SelectList(Model.ProductList.AsEnumerable(), "Product_Id", "Product_Name"), "", new {  @class = "form-control control-text", @onchange = "OnChangeProduct(this, " + i + ");" })*@

                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].ProductName, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Product_id)
                                                    </td>
                                                    <td width="15%">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Required_date, new { @Value = DateTime.Now.ToString("MM/dd/yyyy"), @readonly = true, @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Required_date)
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Required_qty, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Required_qty)
                                                    </td>
                                                    <td width="15%">
                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Quoted_date, new { @Value = DateTime.Now.ToString("MM/dd/yyyy"), @class = "form-control control-text datePicker" })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Quoted_date)
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Quoted_qty, new { @class = "form-control control-text", @onkeyup = "OnChangeQuantity(this, " + Model.PurchaseQuotationItemList[i].Product_id + ", " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Quoted_qty)
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Unit_price, new { id = "EditPurchaseQuotationItemList_" + i + "__Unit_price", @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Unit_price)
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].Discount_percent, new { id = "EditPurchaseQuotationItemList_" + i + "__Discount_percent", @class = "form-control control-text", @onkeyup = "OnChangeDiscount(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Discount_percent)
                                                    </td>
                                                    <td width="10%">
                                                        @Html.DropDownListFor(m => m.PurchaseQuotationItemList[i].Vat_Code, new SelectList(Model.VATList.AsEnumerable(), "VAT_Id", "VAT_percentage"), new { id = "EditPurchaseQuotationItemList_" + i + "__Vat_Code", @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].Vat_Code)
                                                    </td>
                                                    <td>
                                                        @Html.TextBoxFor(model => model.PurchaseQuotationItemList[i].LineTotal, new { id = "EditPurchaseQuotationItemList_" + i + "__LineTotal", @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.PurchaseQuotationItemList[i].LineTotal)
                                                    </td>
                                                    @*<td style="width: 90px;">
                                                            <input class="BtnPlus btn pull-left" type="button" value="+" />
                                                            @if (i > 0)
                                                            {
                                                                <input style="margin-left:5px;" class="BtnMinus btn pull-left" type="button" value="-" />
                                                            }
                                                        </td>*@
                                                </tr>
                                            }
                                        </table>

                                    </div>

                                    <div class="modal-footer">

                                        <input class="btn btn-primary pull-left" type="submit" id="btnSubmit" name="submitButton" value="Update" />
                                        <button class="btn pull-left" data-dismiss="modal">Close</button>

                                        <div class="row" style="float:right;">
                                            Total : <span>@Html.TextBoxFor(m => m.PurchaseQuotation.TotalBefDocDisc, new { id = "editTotalPurchase", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                            Discount Amount : <span>@Html.TextBoxFor(m => m.PurchaseQuotation.DocDiscAmt, new { id = "editTotalDiscount", @class = "input-small", @onkeyup = "OnChangeDiscountSummary(this);" }) @Html.ValidationMessageFor(model => model.PurchaseQuotation.DocDiscAmt)</span> <br />
                                            Tax Amount : <span>@Html.TextBoxFor(m => m.PurchaseQuotation.TaxAmt, new { id = "editTotalTax", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                            Total Quotation Amount : <span>@Html.TextBoxFor(m => m.PurchaseQuotation.TotalQtnAmt, new { id = "editTotalQuotationAmt", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                        </div>

                                    </div>

                                </div>

                            </div>

                        </div>
                    </div>
                </div>

            </div>

            @*<div class="modal-footer">
                    <input class="btn btn-primary pull-left" type="submit" id="btnSubmit" name="submitButton" value="Update" />
                    <button class="btn pull-left" data-dismiss="modal">Close</button>
                    @Ajax.ActionLink("Change content", "UpdateContent", "Home", new AjaxOptions { UpdateTargetId = "myTabContent" })
                </div>*@

        </div>
    </div>
}

