@model  Troy.Web.Models.GoodsReceiptViewModels

@Scripts.Render("~/bundles/script/jqueryval")

<script type="text/javascript">
    $(document).ready(function () {
        $('.datePicker').datepicker();

        $('#creGRDocumentDate').datepicker({
            dateFormat: 'dd/MM/yy', minDate: 0, maxDate: 0
        });

        $('#creGRDueDate').datepicker({
            dateFormat: 'dd/MM/yy', minDate: 0, maxDate: 0
        });

        $('#creGRPostingDate').datepicker({
            dateFormat: 'dd/MM/yy', minDate: 0, maxDate: 0
        });

        $("#editTypeahead").jAutochecklist();
        var i;

        i = $("#ItemCount").val();

        //Dynamically add quotation row
        function addRow() {

            var date = new Date();
            var strDate = (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();

            var selectHtml = CreateSelect(i);
            var selectHtml1 = CreateVATSelect(i);

            selectHtml += '</select>';
            selectHtml1 += '</select>';

            var html = '<tr>' +
                         '<td style="display:none;"> <input class="form-control control-text" data-val="true" data-val-number="The field IsActive must be a number." data-val-required="The IsActive field is required." id="PurchaseInvoiceItemsList_' + i + '__IsDummy" name="PurchaseInvoiceItemsList[' + i + '].IsDummy" type="text" value="">  </td>' +
                         '<td width="25%"> ' +
                             selectHtml +
                             '<span class="field-validation-valid" data-valmsg-for="PurchaseInvoiceItemsList[' + i + '].Product_id" data-valmsg-replace="true"></span>' +
                         '<td width="10%">' +
                             '<input class="form-control control-text" data-val="true" data-val-number="The field Unit_price must be a number." data-val-required="The Unit_price field is required." id="PurchaseInvoiceItemsList_' + i + '__Unit_price" name="PurchaseInvoiceItemsList[' + i + '].Unit_price" readonly="True" type="text" value="">' +
                             '<span class="field-validation-valid" data-valmsg-for="PurchaseInvoiceItemsList[' + i + '].Unit_price" data-valmsg-replace="true"></span>' +
                         '</td>' +
                         '<td width="10%">' +
                             '<input class="form-control control-text" data-val="true" data-val-number="The field Required Quantity must be a number." data-val-required="The Required Quantity field is required." id="PurchaseInvoiceItemsList_' + i + '__Quantity" name="PurchaseInvoiceItemsList[' + i + '].Quantity" onkeyup="OnChangeQuantity(this, ' + i + ');" type="text" value="">' +
                             '<span class="field-validation-valid" data-valmsg-for="PurchaseInvoiceItemsList[' + i + '].Quantity" data-valmsg-replace="true"></span>' +
                         '</td>' +
                         '<td width="8%">' +
                             '<input class="form-control control-text" data-val="true" data-val-number="The field Discount_percent must be a number." data-val-range="The field Discount% must be between 0 and 100." data-val-range-max="100" data-val-range-min="0"  data-val-required="The Discount_percent field is required." id="PurchaseInvoiceItemsList_' + i + '__Discount_percent" name="PurchaseInvoiceItemsList[' + i + '].Discount_percent" onkeyup="OnChangeDiscount(this, ' + i + ');" type="text" value="">' +
                             '<span class="field-validation-valid" data-valmsg-for="PurchaseInvoiceItemsList[' + i + '].Discount_percent" data-valmsg-replace="true"></span>' +
                         '</td>' +
                          '<td width="12%">' +
                              selectHtml1 +
                             '<span class="field-validation-valid" data-valmsg-for="PurchaseInvoiceItemsList_[' + i + '].__Vat_Code" data-valmsg-replace="true"></span>' +
                         '</td>' +
                          '<td width="5%">' +
                             '<input class="form-control control-text" data-val="true" data-val-number="The field Freight_Loading must be a number." data-val-range="The Freight Loading is required."  data-val-required="The Freight_Loading field is required." id="PurchaseInvoiceItemsList_' + i + '__Freight_Loading" name="PurchaseInvoiceItemsList[' + i + '].Freight_Loading" type="text" value="">' +
                             '<span class="field-validation-valid" data-valmsg-for="PurchaseInvoiceItemsList[' + i + '].Freight_Loading" data-valmsg-replace="true"></span>' +
                         '</td>' +
                          '<td width="5%">' +
                             '<input class="form-control control-text valid" data-val="true" data-val-number="The field Amount must be a number." data-val-required="The Amount field is required." id="PurchaseInvoiceItemsList_' + i + '__LineTotal" name="PurchaseInvoiceItemsList[' + i + '].LineTotal" readonly="True" type="text" value="">' +
                             '<span class="field-validation-valid" data-valmsg-for="PurchaseInvoiceItemsList[' + i + '].LineTotal" data-valmsg-replace="true"></span>' +
                         '</td>' +
                         '<td>' +
                             '<input type="button" class="BtnPlus btn pull-left" value="+" /> <input style="margin-left:5px;" type="button" class="BtnMinus btn pull-left" value="-" />' +
                         '</td>' +
                         '</tr>'

            $(html).appendTo($("#EditTable"))

            //$("#PurchaseQuotationItemList_1__Required_date").datepicker("refresh");
            i++;

            //$("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");

            $("#EditTable").delegate(".datePicker", "focusin", function () {
                $(this).datepicker();
            });
        };

        function CreateSelect(rowID) {
            //debugger;

            var selectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field Product_id must be a number." data-val-required="The Product_id field is required." id="PurchaseInvoiceItemsList_' + rowID + '__Product_id" name="PurchaseInvoiceItemsList[' + rowID + '].Product_id" onchange="OnChangeProduct(this, ' + rowID + ');">';
            selectHtml += '<option value=""></option>';

            var dataUrl = "/PurchaseInvoices/GetProductList";

            $.ajax({
                type: 'GET',
                url: dataUrl,
                async: false,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                },
                success: function (result, status) {
                    //debugger;
                    for (var count = 0; count < result.length; count++) {
                        selectHtml += '<option value="' + result[count].Product_Id + '"selected>' + result[count].Product_Name + '</option>';
                    }
                }
            });

            return selectHtml;
        }

        function CreateVATSelect(rowID) {
            var selectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field VAT_Id must be a number." data-val-required="The VAT_Id field is required." id="PurchaseInvoiceItemsList_' + rowID + '__VAT_Id" name="PurchaseInvoiceItemsList[' + rowID + '].VAT_Id" onchange="OnChangeVAT();" >';
            selectHtml += '<option value=""></option>';


            var dataUrl = "/PurchaseInvoices/GetVATList";

            $.ajax({
                type: 'GET',
                url: dataUrl,
                async: false,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                },
                success: function (result, status) {
                    //debugger;
                    for (var count = 0; count < result.length; count++) {
                        selectHtml += '<option value="' + result[count].VAT_Id + '">' + result[count].VAT_percentage + '</option>';
                    }
                }
            });

            return selectHtml;
        }

        $("#EditTable").on("click", ".BtnPlus", addRow);

        function deleteRow() {
            var par = $(this).parent().parent();
            //par.remove();
            //$('#idEstablishmentRow td.ms-formbody span input').attr('id');
            var id = par[0].childNodes[1].childNodes[1].id;

            id = '#' + id;

            $(id).val("1");

            //par[0].childNodes[0].childNodes[1].value = 1;

            //$(id).val(1);
            par.hide();
        };
        $("#EditTable").on("click", ".BtnMinus", deleteRow);

    });

    function TabChange() {
        debugger;
        //if ($("#btnSubmit").val == "Next") {
        $('#edittabs a[href = #editQuotationItem]').tab('show');
        //    $("#btnSubmit").val("Save");
        //}
    }

    $(function () {
        $("#btnEditNextTab").click(function (e) {

            debugger;

            e.preventDefault();
            var _this = $(this);
            var _form = _this.closest("#editdefault");

            var validator = $("#editdefault").validate(); // obtain validator
            var anyError = false;
            _form.find("input").each(function () {
                //debugger;
                if (this.parentNode.parentNode.className != "jAutochecklist_list") {
                    if (!validator.element(this)) { // validate every input element inside this step
                        anyError = true;
                    }
                }
            });

            _form.find("select").each(function () {
                debugger;

                if (!validator.element(this)) { // validate every input element inside this step
                    anyError = true;
                }
            });

            if (anyError) {
                return false;
            }
            else {
                $('#edittabs a[href = #editQuotationItem]').tab('show');
            }// exit if any error found

        });

    });

    function OnChangeProduct(val, rowId) {

        //debugger;
        var pID = parseInt(val.value);
        var dataUrl = "/PurchaseInvoices/GetPrice?pID=" + pID;

        $.ajax({
            type: 'GET',
            url: dataUrl,
            data: pID,
            async: true,
            cache: false,
            crossDomain: true,
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            error: function (xhr, err) {
            },
            success: function (result, status) {
                //debugger;
                var id = "#PurchaseInvoiceItemsList_" + rowId + "__Unit_price";
                $(id).val(result);

                CalculateTotal();
                CalculateTotalAmount();
            }
        });
    }

    function OnChangeQuantity(currentQty, rowId) {
        //debugger;

        var qty = currentQty.value;
        var price = $("#PurchaseInvoiceItemsList_" + rowId + "__Unit_price").val();

        var totAmount = price * qty;

        var id = "#PurchaseInvoiceItemsList_" + rowId + "__LineTotal";
        $(id).val(totAmount);
        CalculateTotal();
        CalculateTotalAmount();
    }

    function OnChangeDiscount(currentDis, rowId) {
        //debugger;

        var dis = currentDis.value;
        var qty = $("#PurchaseInvoiceItemsList_" + rowId + "__Quantity").val();
        var price = $("#PurchaseInvoiceItemsList_" + rowId + "__Unit_price").val();

        //var totAmount = (price * qty) - (price * dis / 100)

        //var id = "#PurchaseQuotationItemList_" + rowId + "__Amount";
        //$(id).val(totAmount);
        CalculateDiscount();
        CalculateTotalAmount();
    }

    function OnChangeVAT() {
        CalculateTax();
        CalculateTotalAmount();
    }

    function OnChangeDiscountSummary(currentDis) {
        var totdis = currentDis.value;
        var totdoc = $("#totalPurchase1").val();
        var tottax = $("#totalTax1").val();
        tot = (parseFloat(totdoc) - parseFloat(totdis)) + parseFloat(tottax);

        $("#totalQuotationAmt1").val(tot);
    }

    function CalculateTotal() {
        //debugger;
        var tot = 0;
        //if (i == 0) {
        //    tot = parseFloat(tot) + parseFloat($("#PurchaseQuotationItemList_" + i + "__Amount").val());
        //}
        //else {
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#PurchaseInvoiceItemsList_" + j + "__LineTotal").val()))) {
                tot = parseFloat(tot) + parseFloat($("#PurchaseInvoiceItemsList_" + j + "__LineTotal").val());

            }
        }
        //}

        $("#totalPurchase1").val(tot);

    }

    function CalculateDiscount() {
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Discount_percent").val()))) {
                tot = parseFloat(tot) + parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Discount_percent").val());
            }
        }

        $("#totalDiscount1").val(tot);

    }

    function CalculateTax() {
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Vat_Code").val()))) {
                tot = parseFloat(tot) + parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Vat_Code").val());
            }
        }

        $("#totalTax1").val(tot);

    }

    function CalculateTotalAmount() {
        var totdoc = 0;
        var totdis = 0;
        var tottax = 0;
        var tot = 0;
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#PurchaseInvoiceItemsList_" + j + "__LineTotal").val()))) {
                totdoc = parseFloat(totdoc) + parseFloat($("#PurchaseInvoiceItemsList_" + j + "__LineTotal").val());
            }
        }

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Discount_percent").val()))) {
                totdis = parseFloat(totdis) + parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Discount_percent").val());
            }
        }

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Vat_Code").val()))) {
                tottax = parseFloat(tottax) + parseFloat($("#PurchaseInvoiceItemsList_" + j + "__Vat_Code").val());
            }
        }

        tot = (totdoc - totdis) + tottax;

        $("#totalQuotationAmt1").val(tot);

    }

</script>

@using (Html.BeginForm("Index", "PurchaseOrders"))
{
    @Html.ValidationSummary(true)
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title" id="myModalLabel">Add Purchase Invoice from Goods Receipt</h4>
            </div>

            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="row">
                        <div class="tabs">
                            <ul id="edittabs" class="nav nav-tabs tabdrop">
                                <li class="active">
                                    <a href="#editdefault" data-toggle="tab">General </a>
                                </li>
                                <li><a href="#editQuotationItem" data-toggle="tab">Product </a></li>
                            </ul>

                            @Html.HiddenFor(model => model.goodreceipt.Goods_Receipt_Id)
                            @Html.Hidden("ItemCount", Model.goodreceiptitemlist.Count)

                            <div id="editTabContent" class="tab-content">
                                <div class="tab-pane fade active in" id="editdefault">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-horizontal">
                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Goods Receipt ID
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.Goods_Receipt_Id, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Goods_Receipt_Id)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Vendor Name
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*@Html.TextBoxFor(model => model.PurchaseInvoice.Vendor, new { @class = "form-control control-text" })
                                                            @Html.ValidationMessageFor(model => model.PurchaseInvoice.Vendor)*@
                                                        @Html.DropDownListFor(m => m.goodreceipt.Vendor, new SelectList(Model.BussinessList.AsEnumerable(), "BP_Id", "BP_Name"), "", new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Vendor)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Reference Number
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.Reference_Number, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Reference_Number)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Document Status
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.goodreceipt.Doc_Status, new List<SelectListItem>
                                                        {
                                                        new SelectListItem{ Text="Open", Value = "Open" },
                                                        new SelectListItem{ Text="Closed", Value = "Closed" },
                                                        new SelectListItem{ Text="Cancel", Value = "Cancel" }
                                                        }, new { @class = "form-control", @disabled = true })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Doc_Status)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Posting Date
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*@Html.TextBoxFor(model => model.PurchaseOrder.Posting_Date, new { @Value = DateTime.Now.ToString("dd/MM/yyyy"), @class = "form-control control-text ", @readonly = true })*@
                                                        @*@Html.TextBoxFor(model => model.PurchaseOrder.Posting_Date, new { @class = "form-control control-text datePicker", @id = "crePostingDate" })*@
                                                        @Html.TextBoxFor(model => model.goodreceipt.Posting_Date, new { @class = "form-control control-text", @id = "creGRPostingDate" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Posting_Date)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Due Date
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.Due_Date, new { @class = "form-control control-text", @id = "creGRDueDate" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Due_Date)
                                                    </div>
                                                </div>
                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Document Date
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.Document_Date, new { @class = "form-control control-text", @id = "creGRDocumentDate" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Document_Date)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-horizontal">
                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Ship To
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*@Html.TextBoxFor(model => model.PurchaseInvoice.Ship_To, new { @class = "form-control control-text" })
                                                            @Html.ValidationMessageFor(model => model.PurchaseInvoice.Ship_To)*@
                                                        @Html.DropDownListFor(m => m.goodreceipt.Ship_To, new SelectList(Model.BranchList.AsEnumerable(), "Branch_Id", "Branch_Name"), "", new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Ship_To)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Freight
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.Freight, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Freight)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Loading
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.Loading, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Loading)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Distirbuted Land Cost
                                                    </div>
                                                    <div class="col-md-8">
                                                        @*@Html.TextBoxFor(model => model.goodreceipt.Distribute_LandedCost, new { @class = "form-control control-text" })*@
                                                        @Html.DropDownListFor(model => model.goodreceipt.Distribute_LandedCost, new List<SelectListItem>
                                                         {
                                                            new SelectListItem{ Text="Equally", Value = "Equally" },
                                                            new SelectListItem{ Text="Quantity", Value = "Quantity" },
                                                            new SelectListItem{ Text="Cost", Value = "Cost" }
                                                         }, new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Distribute_LandedCost)
                                                    </div>
                                                </div>

                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Discount
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.DocDiscAmt, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.DocDiscAmt)
                                                    </div>
                                                </div>
                                                <div class="row form-group">
                                                    <div class="col-md-4">
                                                        Remarks
                                                    </div>
                                                    <div class="col-md-8">
                                                        @Html.TextBoxFor(model => model.goodreceipt.Remarks, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceipt.Remarks)
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <br />
                                    <div class="row">
                                        <div class="modal-footer">
                                            <input class="btn btn-primary pull-left" type="button" id="btnEditNextTab" name="nextButton" value="Next" />
                                            <button class="btn pull-left" data-dismiss="modal">Cancel</button>
                                        </div>
                                    </div>
                                </div>

                                <div class="tab-pane fade" id="editQuotationItem">

                                    <div>

                                        <table id="EditTable" class="table display">
                                            <thead>
                                                <tr>
                                                    <th>Product Id</th>
                                                    <th>Unit Price</th>
                                                    <th>Quantity</th>
                                                    <th>Discount %</th>
                                                    <th>VAT Code</th>
                                                    <th>Freight Loading</th>
                                                    <th>LineTotal</th>
                                                    <th></th>
                                                </tr>
                                            </thead>

                                            @for (int i = 0; i < Model.goodreceiptitemlist.Count; i++)
                                            {
                                                @Html.HiddenFor(model => model.goodreceiptitemlist[i].Goods_Receipt_Id)

                                                <tr>
                                                    <td style="display:none;">
                                                        @Html.HiddenFor(model => model.goodreceiptitemlist[i].IsDummy, 0)

                                                    </td>
                                                    <td width="25%">
                                                        @Html.DropDownListFor(m => m.goodreceiptitemlist[i].Product_id, new SelectList(Model.productlist.AsEnumerable(), "Product_Id", "Product_Name", Model.goodreceiptitemlist[i].Product_id), new { @class = "form-control control-text", @onchange = "OnChangeProduct(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].Product_id)
                                                    </td>
                                                    <td width="10%">
                                                        @Html.TextBoxFor(model => model.goodreceiptitemlist[i].Unit_price, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].Unit_price)
                                                    </td>
                                                    <td width="10%">
                                                        @Html.TextBoxFor(model => model.goodreceiptitemlist[i].Quantity, new { @class = "form-control control-text", @onkeyup = "OnChangeQuantity(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].Quantity)
                                                    </td>
                                                    <td width="8%">
                                                        @Html.TextBoxFor(model => model.goodreceiptitemlist[i].Discount_percent, new { @class = "form-control control-text", @onkeyup = "OnChangeDiscount(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].Discount_percent)
                                                    </td>
                                                    <td width="12%">
                                                        @*@Html.TextBoxFor(model => model.goodreceiptitemlist[i].Vat_Code, new { @class = "form-control control-text" })
                                                            @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].Vat_Code)*@
                                                        @Html.DropDownListFor(m => m.goodreceiptitemlist[i].Vat_Code, new SelectList(Model.VATList.AsEnumerable(), "VAT_Id", "VAT_percentage", Model.goodreceiptitemlist[i].Vat_Code), new { @class = "form-control control-text", @onchange = "OnChangeVAT();" })
                                                        @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].Vat_Code)
                                                    </td>
                                                    <td width="5%">
                                                        @Html.TextBoxFor(model => model.goodreceiptitemlist[i].Freight_Loading, new { @class = "form-control control-text" })
                                                        @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].Freight_Loading)
                                                    </td>
                                                    <td width="5%">
                                                        @Html.TextBoxFor(model => model.goodreceiptitemlist[i].LineTotal, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.goodreceiptitemlist[i].LineTotal)
                                                    </td>
                                                    <td style="width: 90px;">
                                                        <input class="BtnPlus btn pull-left" type="button" value="+" />
                                                        @if (i > 0)
                                                        {
                                                            <input style="margin-left:5px;" class="BtnMinus btn pull-left" type="button" value="-" />
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </table>

                                    </div>

                                    <div class="modal-footer">

                                        <input class="btn btn-primary pull-left" type="submit" id="btnSubmit" name="submitButton" value="Save-PurQuo" />
                                        <button class="btn pull-left" data-dismiss="modal">Close</button>

                                        <div class="row" style="float:right;">
                                            @*Total : <span id="totalPurchase">0</span><br />
                                                Total Before Document Discount : <span id="totalbfdocdisc">@Model.PurchaseQuotation.TotalBefDocDisc</span><br />
                                                Document Discount Amount : <span id="docdisamt">@Model.PurchaseQuotation.DocDiscAmt</span><br />
                                                Tax Amount : <span id="taxamt">@Model.PurchaseQuotation.TaxAmt</span><br />
                                                Total Order Amount : <span id="totalordamt">@Model.PurchaseQuotation.TotalQtnAmt</span><br />*@

                                            Total : <span>@Html.TextBoxFor(m => m.goodreceipt.TotalBefDocDisc, new { id = "totalPurchase1", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                            Discount Amount : <span>@Html.TextBoxFor(m => m.goodreceipt.DocDiscAmt, new { id = "totalDiscount1", @class = "input-small", @onkeyup = "OnChangeDiscountSummary(this);" }) @Html.ValidationMessageFor(model => model.goodreceipt.DocDiscAmt) </span> <br />
                                            Tax Amount : <span>@Html.TextBoxFor(m => m.goodreceipt.TaxAmt, new { id = "totalTax1", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                            Total Quotation Amount : <span>@Html.TextBoxFor(m => m.goodreceipt.TotalGRDocAmt, new { id = "totalQuotationAmt1", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
