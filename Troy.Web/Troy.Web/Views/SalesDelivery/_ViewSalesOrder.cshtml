@model Troy.Web.Models.SalesDeliveryViewModels

@Scripts.Render("~/bundles/script/jqueryval")
<script type="text/javascript">
    var i = 0;

    $(document).ready(function () {

        //$('.datePicker').datepicker();
        $('.datePicker').datepicker({ dateFormat: 'dd/MM/yy' }).val();

        $('#Date').datepicker({
            dateFormat: 'dd/MM/yy', minDate: 0, maxDate: 0
        });

        $('#Date1').datepicker({
            dateFormat: 'dd/MM/yy', minDate: 0
        });

        $("#typeahead").jAutochecklist({
            width: 221
        });
        $("#productTypeahead").jAutochecklist({
            width: 135,
            listMaxHeight: 50
        });

        i = $("#ItemCount").val();
        alert(i);

        //Dynamically add quotation row
        function addRow() {
            var date = new Date();
            var strDate = (date.getMonth() + 1) + "/" + date.getDate() + "/" + date.getFullYear();

            var selectHtml = CreateSelect(i);
            var selectHtml1 = CreateVATSelect(i);

            selectHtml += '</select>';
            selectHtml1 += '</select>';

            var html = '<tr>' +
                           '<td style="display:none;"> <input class="form-control control-text" data-val="true" data-val-number="The field IsActive must be a number." data-val-required="The IsActive field is required." id="salesorderitemlist_' + i + '__IsDummy" name="salesorderitemlist[' + i + '].IsDummy" type="text" value="">  </td>' +
                           '<td width="20%"> ' +
                               selectHtml +
                               '<span class="field-validation-valid" data-valmsg-for="salesorderitemlist[' + i + '].Product_id" data-valmsg-replace="true"></span>' +
                           '</td>' +
                           //'<td width="15%">' +
                           //    '<input class="form-control control-text datePicker" data-val="true" data-val-date="The field Required Date must be a date." data-val-required="The Required Date field is required." id="PurchaseQuotationItemList_' + i + '__Required_date" name="PurchaseQuotationItemList[' + i + '].Required_date" type="text" value="' + strDate + '">' +
                           //    '<span class="field-validation-valid" data-valmsg-for="goodreceiptitemlist[' + i + '].Required_date" data-valmsg-replace="true"></span>' +
                           //'</td>' +
                           '<td>' +
                               '<input class="form-control control-text" data-val="true" data-val-number="The field Required Quantity must be a number." data-val-required="The Required Quantity field is required." id="salesorderitemlist_' + i + '__Quantity" name="salesorderitemlist[' + i + '].Quantity" onkeyup="OnChangeQuantity(this, ' + i + ');" type="text" value="">' +
                               '<span class="field-validation-valid" data-valmsg-for="salesorderitemlist[' + i + '].Quantity" data-valmsg-replace="true"></span>' +
                           '</td>' +
                           '<td>' +
                               '<input class="form-control control-text" data-val="true" data-val-number="The field Unit_price must be a number." data-val-required="The Unit_price field is required." id="salesorderitemlist_' + i + '__Unit_price" name="salesorderitemlist[' + i + '].Unit_price" readonly="True" type="text" value="">' +
                               '<span class="field-validation-valid" data-valmsg-for="salesorderitemlist[' + i + '].Unit_price" data-valmsg-replace="true"></span>' +
                           '</td>' +
                           '<td>' +
                               '<input class="form-control control-text" data-val="true" data-val-number="The field Discount_percent must be a number." data-val-range="The field Discount% must be between 0 and 100." data-val-range-max="100" data-val-range-min="0"  data-val-required="The Discount_percent field is required." id="salesorderitemlist_' + i + '__Discount_percent" name="salesorderitemlist[' + i + '].Discount_percent" onkeyup="OnChangeDiscount(this, ' + i + ');" type="text" value="">' +
                               '<span class="field-validation-valid" data-valmsg-for="salesorderitemlist[' + i + '].Discount_percent" data-valmsg-replace="true"></span>' +
                           '</td>' +
                            '<td>' +

                              '<input class="form-control control-text valid" data-val="true" data-val-number="The field Amount must be a number." data-val-required="The Amount field is required." id="salesorderitemlist_' + i + '__LineTotal" name="salesorderitemlist[' + i + '].LineTotal" readonly="True" type="text" value="">' +
                               '<span class="field-validation-valid" data-valmsg-for="salesorderitemlist[' + i + '].LineTotal" data-valmsg-replace="true"></span>' +
                           '</td>' +
                           //'<td>' +
                           //    '<input class="form-control control-text valid" data-val="true" data-val-number="The field Amount must be a number." data-val-required="The Amount field is required." id="goodreceiptitemlist_' + i + '__Freight_Loading" name="goodreceiptitemlist[' + i + '].Freight_Loading" readonly="True" type="text" value="">' +
                           //    '<span class="field-validation-valid" data-valmsg-for="goodreceiptitemlist[' + i + '].Freight_Loading" data-valmsg-replace="true"></span>' +
                           //'</td>' +
                           '<td>' +

                             selectHtml1 +
                               '<span class="field-validation-valid" data-valmsg-for="salesorderitemlist[' + i + '].Vat_Code" data-valmsg-replace="true"></span>' +
                           '</td>' +

                           '<td>' +
                               '<input type="button" class="BtnPlus btn pull-left" value="+" /> <input style="margin-left:5px;" type="button" class="BtnMinus btn pull-left" value="-" />' +
                           '</td>' +

                           @*'<td>@Html.TextBoxFor(model => model.PurchaseQuotationItemList[2].Required_date, new { @class = "form-control control-text datePicker" })</td>' +
                       '<td> <input class="form-control control-text datePicker hasDatepicker" data-val="true" data-val-date="The field Required Date must be a date." data-val-required="The Required Date field is required." id="PurchaseQuotationItemList_0__Required_date" name="PurchaseQuotationItemList[0].Required_date" type="text" value=""> </td>' +*@

                           '</tr>'

            $(html).appendTo($("#EditTable"))

            i++;

            //$("form").removeData("validator");
            //$("form").removeData("unobtrusiveValidation");
            //$.validator.unobtrusive.parse("form");

            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");

            $("#EditTable").delegate(".datePicker", "focusin", function () {
                $(this).datepicker();
            });

        }

        function CreateSelect(rowID) {

            //debugger;

            var selectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field Product_id must be a number." data-val-required="The Product_id field is required." id="salesorderitemlist_' + rowID + '__Product_id" name="salesorderitemlist[' + rowID + '].Product_id" onchange="OnChangeProduct(this, ' + rowID + ');">';
            selectHtml += '<option value=""></option>';

            var dataUrl = "../SalesOrders/GetProductList";

            $.ajax({
                type: 'GET',
                url: dataUrl,
                async: false,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                },
                success: function (result, status) {
                    //debugger;
                    for (var count = 0; count < result.length; count++) {
                        selectHtml += '<option value="' + result[count].Product_Id + '">' + result[count].Product_Name + '</option>';
                    }
                }
            });
            CalculateTotal();
            CalculateTotalAmount();
            CalculateTax();
            return selectHtml;
        }

        function CreateVATSelect(rowID) {
            var selectHtml = '<select class="form-control control-text valid" data-val="true" data-val-number="The field VAT_Id must be a number." data-val-required="The VAT_Id field is required." id="salesorderitemlist_' + rowID + '__Vat_Code" name="salesorderitemlist[' + rowID + '].Vat_Code" onchange="OnChangeVAT();" >';
            selectHtml += '<option value=""></option>';


            var dataUrl = "../SalesOrders/GetVATList";

            $.ajax({
                type: 'GET',
                url: dataUrl,
                async: false,
                cache: false,
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: 'json',
                error: function (xhr, err) {
                },
                success: function (result, status) {
                    //debugger;
                    for (var count = 0; count < result.length; count++) {
                        selectHtml += '<option value="' + result[count].VAT_percentage + '">' + result[count].VAT_percentage + '</option>';
                    }
                }
            });
            CalculateTotal();
            CalculateTotalAmount();
            CalculateTax();
            return selectHtml;
        }

        $("#EditTable").on("click", ".BtnPlus", addRow);

        function deleteRow() {

            //debugger;

            if (i == 1) {
                alert("Atleast one item for each product");
            }
            else {

                var par = $(this).parent().parent();
                //par.remove();
                //$('#idEstablishmentRow td.ms-formbody span input').attr('id');

                var id = par[0].childNodes[1].childNodes[1].id;

                id = '#' + id;

                $(id).val("1");

                //par[0].childNodes[0].childNodes[1].value = 1;

                //$(id).val(1);
                par.hide();
                CalculateTotal();
                CalculateTotalAmount();
                CalculateTax();
            }
        };

        $("#EditTable").on("click", ".BtnMinus", deleteRow);

    });


    $(function () {
        $("#btnNextTabPurQuo").click(function (e) {
            e.preventDefault();
            var _this = $(this);
            var _form = _this.closest("#editdefault");

            var validator = $("#editdefault").validate(); // obtain validator
            var anyError = false;
            _form.find("input").each(function () {
                debugger;
                if (this.parentNode.parentNode.className != "jAutochecklist_list") {
                    if (!validator.element(this)) { // validate every input element inside this step
                        anyError = true;
                    }
                }
            });

            _form.find("select").each(function () {
                //debugger;
                if (!validator.element(this)) { // validate every input element inside this step
                    anyError = true;
                }
            });

            if (anyError) {
                return false;
            }
            else {
                $('#edittabs a[href = #editQuotationlist]').tab('show');
            }// exit if any error found

            //$.post(_form.attr("action"), _form.serialize(), function (data) {
            //    //check the result and do whatever you want
            //    $('#createtabs a[href = #addQuotationlist]').tab('show');
            //})


            //$("#default").validate({
            //    showErrors: function (errorMap, errorList) {
            //        debugger;
            //    }
            //});

        });

        $("#btnSuddbmit").click(function (e) {
            e.preventDefault();
            var _this = $(this);
            var _form = _this.closest("#editQuotationlist");

            var validator = $("#editQuotationlist").validate(); // obtain validator
            var anyError = false;
            _form.find("input").each(function () {
                debugger;
                if (this.parentNode.parentNode.className != "jAutochecklist_list" || this.type != "hidden") {
                    if (!validator.element(this)) { // validate every input element inside this step
                        anyError = true;
                    }
                }
            });

            _form.find("select").each(function () {
                debugger;
                if (!validator.element(this)) { // validate every input element inside this step
                    anyError = true;
                }
            });

            if (anyError) {
                return false;
            }
            else {
                return true; //$('#createtabs a[href = #addQuotationlist]').tab('show');
            }// exit if any error found
        });

    });

    function OnChangeProduct(val, rowId) {
        //debugger;

        var pID = parseInt(val.value);

        var dataUrl = "../SalesOrders/GetPrice?pID=" + pID;

        $.ajax({
            type: 'GET',
            url: dataUrl,
            //data: pID,
            async: true,
            cache: false,
            crossDomain: true,
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            error: function (xhr, err) {
            },
            success: function (result, status) {
                //debugger;
                var id = "#salesorderitemlist_" + rowId + "__Unit_price";
                $(id).val(result);
                //onchange quantity functionality
                var qty = $("#salesorderitemlist_" + rowId + "__Quantity").val();
                var price = $("#salesorderitemlist_" + rowId + "__Unit_price").val();
                var totAmount = price * qty;
                var id = "#salesorderitemlist_" + rowId + "__LineTotal";
                $(id).val(totAmount.toFixed(2));

                //onchange discount functionality
                var dis = $("#salesorderitemlist_" + rowId + "__Discount_percent").val();
                var qty = $("#salesorderitemlist_" + rowId + "__Quantity").val();
                var price = $("#salesorderitemlist_" + rowId + "__Unit_price").val();
                var totAmount = price * qty - ((price * qty) * dis / 100)
                var id = "#salesorderitemlist_" + rowId + "__LineTotal";
                $(id).val(totAmount.toFixed(2));

                CalculateTotal();
                CalculateTotalAmount();
                CalculateTax();
            }
        });
    }

    function OnChangeQuantity(currentQty, rowId) {
        //debugger;

        var qty = currentQty.value;
        var price = $("#salesorderitemlist_" + rowId + "__Unit_price").val();

        var totAmount = price * qty;

        var id = "#salesorderitemlist_" + rowId + "__LineTotal";
        $(id).val(totAmount.toFixed(2));
        //onchange discount functionality
        var dis = $("#salesorderitemlist_" + rowId + "__Discount_percent").val();
        var qty = $("#salesorderitemlist_" + rowId + "__Quantity").val();
        var price = $("#salesorderitemlist_" + rowId + "__Unit_price").val();
        var totAmount = price * qty - ((price * qty) * dis / 100)
        var id = "#salesorderitemlist_" + rowId + "__LineTotal";
        $(id).val(totAmount.toFixed(2));

        CalculateTotal();
        CalculateTotalAmount();
        CalculateTax();
    }

    function OnChangeDiscount(currentDis, rowId) {
        //debugger;

        var dis = currentDis.value;
        var qty = $("#salesorderitemlist_" + rowId + "__Quantity").val();
        var price = $("#salesorderitemlist_" + rowId + "__Unit_price").val();

        var totAmount = price * qty - ((price * qty) * dis / 100)

        var id = "#salesorderitemlist_" + rowId + "__LineTotal";
        $(id).val(totAmount.toFixed(2));

        //on change discount
        var dis = currentDis.value;
        var qty = $("#salesdeliverytitemlist_" + rowId + "__Quantity").val();
        var price = $("#salesdeliverytitemlist_" + rowId + "__Unit_price").val();
        var totAmount = price * qty - ((price * qty) * dis / 100)
        var id = "#salesdeliverytitemlist_" + rowId + "__LineTotal";
        $(id).val(totAmount.toFixed(2));

        CalculateTotal();
        CalculateTotalAmount();
        CalculateTax();
    }

    function OnChangeVAT() {
        //var vat = currentVAT.value;
        //var qty = $("#PurchaseOrderItemsList_" + rowId + "__Quantity").val();
        //var price = $("#PurchaseOrderItemsList_" + rowId + "__Unit_price").val();
        //var dis = $("#PurchaseOrderItemsList_" + rowId + "__Discount_percent").val();

        //var totAmount = price * qty - ((price * qty) * dis / 100)
        //var totvat = totAmount * (vat / 100)
        //var totNet = totAmount + totvat

        //var id = "#PurchaseOrderItemsList_" + rowId + "__LineTotal";
        //$(id).val(totNet);

        CalculateTax();
        CalculateTotal();
        CalculateTotalAmount();
    }

    function OnChangeDiscountSummary(currentDis) {
        //var totdis = currentDis.value;
        //var totdoc = $("#totalPurchase").val();
        //var tottax = $("#totalTax").val();
        //tot = (parseFloat(totdoc) - parseFloat(totdis)) + parseFloat(tottax);

        //$("#totalQuotationAmt").val(tot);

        var percentage = 0;
        var totdoc = 0;
        var totdis = currentDis.value;
        var tottax = 0;
        var totline = 0;
        var totminus = 0;
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()))) {
                totdoc = parseFloat(totdoc) + parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val());
            }
        }

        percentage = totdis / totdoc * 100;


        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()))) {
                totline = parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val() * percentage / 100);
                totminus = parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()) - totline;
                tottax = parseFloat(tottax) + parseFloat(totminus) * parseFloat($("#salesorderitemlist_" + j + "__Vat_Code").val()) / 100;
            }
        }

        tot = (totdoc - totdis) + tottax;

        $("#totalTax").val(tottax.toFixed(2));
        $("#totalQuotationAmt").val(tot.toFixed(2));

    }

    function CalculateTotal() {
        //debugger;
        var tot = 0;
        //if (i == 0) {
        //    tot = parseFloat(tot) + parseFloat($("#PurchaseQuotationItemList_" + i + "__Amount").val());
        //}
        //else {
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()))) {
                tot = parseFloat(tot) + parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val());

            }
        }
        //}
        $("#totalPurchase").val(tot.toFixed(2));
    }

    function CalculateDiscount() {
        var tot = 0;

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__Discount_percent").val()))) {
                tot = parseFloat(tot) + parseFloat($("#salesorderitemlist_" + j + "__Discount_percent").val());
            }
        }

        $("#totalDiscount").val(tot.toFixed(2));
    }

    function CalculateTax() {
        var tot = 0;

        //for (var j = i; j >= 0; j--) {
        //    if (!isNaN(parseFloat($("#PurchaseOrderItemsList_" + j + "__Vat_Code").val()))) {
        //        tot = parseFloat(tot) + parseFloat($("#PurchaseOrderItemsList_" + j + "__Vat_Code").val());
        //    }
        //}

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__Vat_Code").val()))) {
                tot = parseFloat(tot) + (parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()) * parseFloat($("#salesorderitemlist_" + j + "__Vat_Code").val()) / 100);
            }
        }

        $("#totalTax").val(tot.toFixed(2));
    }

    function CalculateTotalAmountOLD() {
        var totdoc = 0;
        var totdis = 0;
        var tottax = 0;
        var tot = 0;
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()))) {
                totdoc = parseFloat(totdoc) + parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val());
            }
        }

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__Discount_percent").val()))) {
                totdis = parseFloat(totdis) + parseFloat($("#salesorderitemlist_" + j + "__Discount_percent").val());
            }
        }

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__Vat_Code").val()))) {
                tottax = parseFloat(tottax) + parseFloat($("#salesorderitemlist_" + j + "__Vat_Code").val());
            }
        }

        tot = (totdoc - totdis) + tottax;

        $("#totalQuotationAmt").val(tot.toFixed(2));
    }

    function CalculateTotalAmount() {
        var totdoc = 0;
        var totdis = 0;
        var tottax = 0;
        var tot = 0;
        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()))) {
                totdoc = parseFloat(totdoc) + parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val());
            }
        }

        //for (var j = i; j >= 0; j--) {
        //    if (!isNaN(parseFloat($("#PurchaseOrderItemsList_" + j + "__Discount_percent").val()))) {
        //        totdis = parseFloat(totdis) + parseFloat($("#PurchaseOrderItemsList_" + j + "__Discount_percent").val());
        //    }
        //}

        for (var j = i; j >= 0; j--) {
            if (!isNaN(parseFloat($("#salesorderitemlist_" + j + "__Vat_Code").val()))) {
                tottax = parseFloat(tottax) + (parseFloat($("#salesorderitemlist_" + j + "__LineTotal").val()) * parseFloat($("#salesorderitemlist_" + j + "__Vat_Code").val()) / 100);
            }
        }

        //tot = (totdoc - totdis) + tottax;
        tot = totdoc + tottax;

        $("#totalQuotationAmt").val(tot.toFixed(2));
    }

</script>

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title" id="myModalLabel">Edit Sales Order</h4>
        </div>
        <div class="modal-body">
            <div class="form-horizontal">
                <div class="row">
                    <div class="tabs">
                        <ul id="edittabs" class="nav nav-tabs tabdrop">
                            <li class="active">
                                <a href="#editdefault" data-toggle="tab">General</a>
                            </li>
                            <li><a href="#editQuotationlist" data-toggle="tab">Product </a></li>
                        </ul>

                        <div id="createtabContent" class="tab-content">
                            <div class="tab-pane fade active in" id="editdefault">
                                <div class="row">
                                    <div class="col-md-6">
                                        @*@Html.HiddenFor(model => model.PurchaseOrder.Purchase_Quote_Id)*@
                                        @Html.HiddenFor(model => model.salesdelivery.Sales_Delivery_Id)
                                        @Html.Hidden("ItemCount", Model.salesorderitemlist.Count)
                                        @Html.HiddenFor(model => model.salesorder.Sales_Order_Id)
                                        @Html.HiddenFor(model => model.salesorderitem.Sale_Orderitem_Id)
                                        <div class="form-horizontal">

                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Sales Order Id
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(model => model.salesorder.Sales_Order_Id, new { @class = "form-control control-text",@disabled="disabled" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Sales_Order_Id)
                                                </div>
                                            </div>


                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Vendor Name
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.DropDownListFor(m => m.salesorder.Customer, new SelectList(Model.BussinessList.AsEnumerable(), "BP_Id", "BP_Name", Model.salesorder.Vendor_Name), new { @class = "form-control control-text" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Customer)
                                                </div>
                                            </div>

                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Reference Number
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(model => model.salesorder.Reference_Number, new { @class = "form-control control-text" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Reference_Number)
                                                </div>
                                            </div>

                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Status
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.DropDownListFor(model => model.salesorder.Order_Status, new List<SelectListItem>
                                                         {
                                                            new SelectListItem{ Text="Open", Value = "Open" },
                                                            new SelectListItem{ Text="Closed", Value = "Closed" },
                                                            new SelectListItem{ Text="Cancel", Value = "Cancel" }
                                                         }, new { @class = "form-control", @disabled = true })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Order_Status)
                                                </div>
                                            </div>

                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Posting Date
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(model => model.salesorder.Posting_Date, new { @class = "form-control control-text", @id = "Date" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Posting_Date)
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-horizontal">
                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Valid Date
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(model => model.salesorder.Delivery_Date, new { @class = "form-control control-text", @id = "Date1" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Delivery_Date)
                                                </div>
                                            </div>

                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Branch
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.DropDownListFor(m => m.salesorder.Branch, new SelectList(Model.BranchList.AsEnumerable(), "Branch_Id", "Branch_Name"), "", new { @class = "form-control control-text" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Branch)
                                                </div>
                                            </div>

                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Document Amount
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(model => model.salesorder.DocDiscAmt, new { @class = "form-control control-text" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.DocDiscAmt)
                                                </div>
                                            </div>

                                            <div class="row form-group">
                                                <div class="col-md-4">
                                                    Remarks
                                                </div>
                                                <div class="col-md-8">
                                                    @Html.TextBoxFor(model => model.salesorder.Remarks, new { @class = "form-control control-text" })
                                                    @Html.ValidationMessageFor(model => model.salesorder.Remarks)
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <div class="row">
                                    <div class="modal-footer">
                                        <input class="btn btn-primary pull-left" type="button" id="btnNextTabPurQuo" name="nextButton" value="Next" />
                                        <button class="btn pull-left" data-dismiss="modal">Cancel</button>
                                    </div>
                                </div>
                            </div>

                            <div class="tab-pane fade" id="editQuotationlist">

                                <div>

                                    <table id="EditTable" class="table display" style="min-height:180px;">
                                        <thead>
                                            <tr>
                                                <th>Product Id</th>
                                                <th>Quantity</th>
                                                <th>Unit Price</th>
                                                <th>Discount %</th>
                                                <th>LineTotal</th>
                                                <th>VAT Code</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < Model.salesorderitemlist.Count; i++)
                                            {
                                                @Html.HiddenFor(model=>model.salesdeliverytitemlist[i].Sales_Delivery_Id)
                                                @Html.HiddenFor(model => model.salesorderitemlist[i].Sales_Order_Id)
                                                @Html.HiddenFor(model => model.salesorderitemlist[i].Sale_Orderitem_Id)
                                                @*@Html.HiddenFor(model => model.SalesQuotationItemList[i].Sales_Qtn_Id)*@

                                                <tr>
                                                    <td style="display:none;">
                                                        @Html.HiddenFor(model => model.salesorderitemlist[i].IsDummy, 0)
                                                    </td>
                                                    <td width="30%">
                                                        @Html.DropDownListFor(m => m.salesorderitemlist[i].Product_id, new SelectList(Model.productlist.AsEnumerable(), "Product_Id", "Product_Name", Model.salesorderitemlist[i].ProductName), new { @class = "form-control control-text", @onchange = "OnChangeProduct(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.salesorderitemlist[i].Product_id)
                                                    </td>
                                                    <td width="9%">
                                                        @Html.TextBoxFor(model => model.salesorderitemlist[i].Quantity, new { @class = "form-control control-text", @onkeyup = "OnChangeQuantity(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.salesorderitemlist[i].Quantity)
                                                    </td>
                                                    <td width="10%">
                                                        @Html.TextBoxFor(model => model.salesorderitemlist[i].Unit_price, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.salesorderitemlist[i].Unit_price)
                                                    </td>
                                                    <td width="8%">
                                                        @Html.TextBoxFor(model => model.salesorderitemlist[i].Discount_percent, new { @class = "form-control control-text", @onkeyup = "OnChangeDiscount(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.salesorderitemlist[i].Discount_percent)
                                                    </td>
                                                    <td width="12%">
                                                        @Html.TextBoxFor(model => model.salesorderitemlist[i].LineTotal, new { @class = "form-control control-text", @readonly = true })
                                                        @Html.ValidationMessageFor(model => model.salesorderitemlist[i].LineTotal)
                                                    </td>
                                                    <td width="11%">
                                                        @Html.DropDownListFor(m => m.salesorderitemlist[i].Vat_Code, new SelectList(Model.VATList.AsEnumerable(), "VAT_percentage", "VAT_percentage", Model.salesorderitemlist[i].Vat_Code), new { @class = "form-control control-text", @onchange = "OnChangeVAT(this, " + i + ");" })
                                                        @Html.ValidationMessageFor(model => model.salesorderitemlist[i].Vat_Code)
                                                    </td>
                                                    <td style="width: 90px;">
                                                        <input class="BtnPlus btn pull-left" type="button" value="+" />
                                                    </td>
                                                </tr>

                                            }
                                        </tbody>
                                    </table>

                                </div>

                                <br />
                                <br />
                                <div class="modal-footer">
                                    <input class="btn btn-primary pull-left" type="submit" id="btnSubmit" name="submitButton" value="Save " />
                                    <button class="btn pull-left" data-dismiss="modal">Close</button>

                                    <div class="row" style="float:right;">
                                        @*Total : <span id="totalPurchase">0</span><br />
                                            Total Before Document Discount : <span id="totalbfdocdisc">0</span><br />
                                            Document Discount Amount : <span id="docdisamt">0</span><br />
                                            Tax Amount : <span id="taxamt">0</span><br />
                                            Total Order Amount : <span id="totalordamt">0</span><br />*@

                                        Total : <span>@Html.TextBoxFor(m => m.salesorder.TotalBefDocDisc, new { id = "totalPurchase", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                        Discount Amount : <span>@Html.TextBoxFor(m => m.salesorder.DocDiscAmt, new { id = "totalDiscount", @class = "input-small", @onkeyup = "OnChangeDiscountSummary(this);" }) @Html.ValidationMessageFor(model => model.salesorder.DocDiscAmt) </span> <br />
                                        Tax Amount : <span>@Html.TextBoxFor(m => m.salesorder.TaxAmt, new { id = "totalTax", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />
                                        Total Quotation Amount : <span>@Html.TextBoxFor(m => m.salesorder.TotalOrdAmt, new { id = "totalQuotationAmt", @class = "input-small", @readonly = true, @style = "border: none;" })</span> <br />

                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>